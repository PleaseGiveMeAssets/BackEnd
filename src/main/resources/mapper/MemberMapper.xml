<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.spring.mapper.MemberMapper">
    <resultMap id="memberResultMap" type="Member">
        <id property="memberId" column="MEMBER_ID"/>
        <result property="password" column="PASSWORD"/>
        <result property="phoneFirst" column="PHONE_FIRST"/>
        <result property="phoneMiddle" column="PHONE_MIDDLE"/>
        <result property="phoneLast" column="PHONE_LAST"/>
        <result property="phoneVerificationCode" column="PHONE_VERIFICATION_CODE"/>
        <result property="phoneVerifiedStatus" column="PHONE_VERIFIED_STATUS"/>
        <result property="name" column="NAME"/>
        <result property="email" column="EMAIL"/>
        <result property="emailVerificationCode" column="EMAIL_VERIFICATION_CODE"/>
        <result property="emailVerifiedStatus" column="EMAIL_VERIFIED_STATUS"/>
        <result property="memberStatus" column="MEMBER_STATUS"/>
        <result property="createdAt" column="CREATED_AT"/>
        <result property="updatedAt" column="UPDATED_AT"/>
    </resultMap>

    <!-- Member 정보를 가져오는 resultMap -->
    <resultMap id="selectMemberProfileResultMap" type="Member" autoMapping="false">
        <constructor>
            <idArg column="member_id" javaType="String"/>
            <arg column="profile_image_url" javaType="String"/>
            <arg column="nickname" javaType="String"/>
            <arg column="member_name" javaType="String"/>
        </constructor>
        <association property="investmentType" javaType="com.example.spring.domain.InvestmentType">
            <id column="investment_type_id" javaType="Integer"/>
            <result column="investment_type_name" property="investmentTypeName" javaType="String"/>
        </association>
    </resultMap>

    <!-- 사용자 프로필을 조회하는 쿼리 -->
    <select id="selectMemberProfile" parameterType="string" resultMap="selectMemberProfileResultMap">
        SELECT u.MEMBER_ID AS member_id,
        u.NICKNAME AS nickname,
        u.PROFILE_IMAGE_URL AS profile_image_url,
        u.NAME AS member_name,
        it.INVESTMENT_TYPE_NAME AS investment_type_name
        FROM MEMBER u
        LEFT JOIN INVESTMENT_TYPE_ANSWER ita ON u.MEMBER_ID = ita.MEMBER_ID
        LEFT JOIN INVESTMENT_TYPE it ON ita.INVESTMENT_TYPE_ID = it.INVESTMENT_TYPE_ID
        WHERE u.MEMBER_ID = #{memberId}
    </select>


    <select id="selectMemberById" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM MEMBER
        WHERE MEMBER_ID = #{memberId}
    </select>

    <insert id="insertMember" parameterType="MemberDTO">
        INSERT INTO MEMBER (MEMBER_ID, PASSWORD, PHONE_FIRST, PHONE_MIDDLE, PHONE_LAST, PHONE_VERIFICATION_CODE, NAME,
        EMAIL, EMAIL_VERIFICATION_CODE)
        VALUES (#{memberId}, #{password}, #{phoneFirst}, #{phoneMiddle}, #{phoneLast}, #{phoneVerificationCode}, #{name},
        #{email}, #{emailVerificationCode})
    </insert>

    <insert id="insertSocialMember" parameterType="SocialMemberDTO">
        INSERT INTO MEMBER (MEMBER_ID, PHONE_FIRST, PHONE_MIDDLE, PHONE_LAST, NAME, EMAIL, SNS)
        VALUES (#{memberId}, #{phoneFirst}, #{phoneMiddle}, #{phoneLast}, #{name}, #{email}, #{sns})
    </insert>

    <!--아이디와 휴대폰 번호로 회원찾기-->
    <select id="findMemberByNameAndPhone" parameterType="FindIdRequestDTO" resultType="Member">
        SELECT *
        FROM MEMBER
        WHERE NAME = #{name}
        AND PHONE_FIRST = #{phoneFirst}
        AND PHONE_MIDDLE = #{phoneMiddle}
    </select>

    <select id="selectMemberByIdAndNameAndPhone" parameterType="FindPasswordRequestDTO" resultType="Member">
        SELECT *
        FROM MEMBER
        WHERE MEMBER_ID = #{memberId}
        AND NAME = #{name}
        AND PHONE_FIRST = #{phoneFirst}
        AND PHONE_MIDDLE = #{phoneMiddle}
    </select>

    <update id="updatePasswordById" parameterType="map">
        UPDATE MEMBER SET PASSWORD = #{password}, UPDATED_AT = CURRENT_TIMESTAMP() WHERE MEMBER_ID = #{memberId}
    </update>

    <select id="findByMemberId" resultType="Member">
        SELECT * FROM MEMBER WHERE MEMBER_ID = #{memberId}
    </select>

    <select id="findMemberByPhoneNumber" resultType="Member">
        SELECT * FROM MEMBER
        WHERE PHONE_FIRST = #{phoneFirst}
        AND PHONE_MIDDLE = #{phoneMiddle}
    </select>

    <update id="incrementPasswordFailureCount" parameterType="String">
        UPDATE MEMBER
        SET PASSWORD_FAILURE_COUNT = PASSWORD_FAILURE_COUNT + 1, UPDATED_AT = CURRENT_TIMESTAMP()
        WHERE MEMBER_ID = #{memberId}
    </update>

    <update id="resetPasswordFailureCount" parameterType="String">
        UPDATE MEMBER
        SET PASSWORD_FAILURE_COUNT = 0, UPDATED_AT = CURRENT_TIMESTAMP()
        WHERE MEMBER_ID = #{memberId}
    </update>

    <!-- survey_status 업데이트 -->
    <update id="updateSurveyStatus">
        UPDATE MEMBER
        SET survey_status = #{surveyStatus}
        WHERE member_id = #{memberId}
    </update>

    <!-- survey_status 조회 -->
    <select id="getSurveyStatus" resultType="String">
        SELECT survey_status FROM MEMBER
        WHERE member_id = #{memberId}
    </select>

</mapper>
