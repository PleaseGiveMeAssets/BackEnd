<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.spring.mapper.PortfolioHistoryMapper">
    <select id="selectListStockPortfolioByMemberId" parameterType="map" resultType="TotalStockInfoDTO">
SELECT stockHistoryId                                             AS stockDate,
       SUM((IFNULL(closedPrice, price) - price) * quantity)       AS totalAmount
FROM (
         -- 매수 주문
         SELECT s.STOCK_ID                           AS stockId,
                s.SHORT_CODE                         AS shortCode,
                s.STOCK_NAME                         AS stockName,
                sh.CLOSED_PRICE                      AS closedPrice,
                p.PRICE                              AS price,
                p.QUANTITY                           AS quantity,
                p.ORDER_TYPE                         AS orderType,
                SUBSTRING(sh.STOCK_HISTORY_ID, 1, 8) AS stockHistoryId
         FROM STOCK s
                  JOIN PORTFOLIO p ON s.STOCK_ID = p.STOCK_ID
             AND s.SHORT_CODE = p.SHORT_CODE
             AND p.ORDER_TYPE = 'B'
                  LEFT JOIN (
             SELECT STOCK_HISTORY_ID, STOCK_ID, SHORT_CODE, CLOSED_PRICE
             FROM (
                      SELECT RANK() OVER (PARTITION BY SUBSTRING(STOCK_HISTORY_ID, 1, 8)
                          ORDER BY STOCK_HISTORY_ID DESC) AS rk,
                             STOCK_HISTORY_ID,
                             STOCK_ID,
                             SHORT_CODE,
                             CLOSED_PRICE
                      FROM STOCK_HISTORY
                      WHERE STOCK_HISTORY_ID BETWEEN #{startDateFormat} AND #{endDateFormat}
                  ) AS sh
             WHERE rk = 1
         ) AS sh ON s.STOCK_ID = sh.STOCK_ID
             AND s.SHORT_CODE = sh.SHORT_CODE
         WHERE p.MEMBER_ID = #{memberId}

                 UNION ALL

         SELECT s.STOCK_ID                                                 AS stockId,
                s.SHORT_CODE                                               AS shortCode,
                s.STOCK_NAME                                               AS stockName,
                (SELECT CLOSED_PRICE
                 FROM STOCK_HISTORY sh
                 WHERE STOCK_HISTORY_ID = (SELECT MAX(STOCK_HISTORY_ID)
                                           FROM STOCK_HISTORY sh
                                           WHERE sh.STOCK_ID = p.STOCK_ID
                                             AND sh.SHORT_CODE = p.SHORT_CODE
                                             AND SUBSTRING(sh.STOCK_HISTORY_ID, 1, 8) =
                                                 SUBSTRING(DATE_FORMAT(p.ORDERED_AT, '%Y%m%d%h%m%s'), 1, 8))
                   AND sh.STOCK_ID = p.STOCK_ID
                   AND sh.SHORT_CODE = p.SHORT_CODE)                       AS closedPrice,
                p.PRICE                                                    AS price,
                p.QUANTITY                                                 AS quantity,
                p.ORDER_TYPE                                               AS orderType,
                SUBSTRING(DATE_FORMAT(p.ORDERED_AT, '%Y%m%d%h%m%s'), 1, 8) AS stockHistoryId
         FROM STOCK s
                  JOIN PORTFOLIO p ON s.STOCK_ID = p.STOCK_ID
             AND s.SHORT_CODE = p.SHORT_CODE
             AND p.ORDER_TYPE = 'S'
         WHERE DATE_FORMAT(p.ORDERED_AT, '%Y%m%d%h%m%s')
             BETWEEN #{startDateFormat} AND #{endDateFormat}
           AND p.MEMBER_ID = #{memberId}
     ) tb
WHERE stockHistoryId IS NOT NULL
GROUP BY stockHistoryId
ORDER BY 1;
    </select>

    <select id="getMemberStockPortfolioTotalInvestedAmountByDate" parameterType="map"
            resultType="com.example.spring.domain.TotalInvestedSumStockPortfolio">
        <![CDATA[
        WITH RECURSIVE date_range (`date`) AS (
            SELECT CAST(#{startDate} AS DATE) AS `date`
            UNION ALL
            SELECT DATE_ADD(`date`, INTERVAL 1 DAY)
            FROM date_range
            WHERE DATE_ADD(`date`, INTERVAL 1 DAY) <= CAST(#{endDate} AS DATE)
        )
        SELECT
            DATE_FORMAT(dr.`date`, '%Y%m%d') AS stockDate,
            ROUND(IFNULL(SUM(totals.total_invested_sum), 0), 1) AS totalInvestedSum,
            ROUND(SUM(IFNULL(totals.total_invested_sum, 0)) OVER (ORDER BY dr.`date`), 1) AS calInvestedSum
        FROM date_range dr
                 LEFT JOIN (
            -- 유저의 거래 내역을 집계하는 서브쿼리
            SELECT
                ut_date AS date,
                SUM(
                        (ut.total_purchase_amount / NULLIF(ut.total_quantity_bought, 0)) *
                        (ut.total_quantity_bought - ut.total_quantity_sold)
                ) AS total_invested_sum
            FROM (
                     SELECT
                         p.STOCK_ID,
                         DATE(p.ORDERED_AT) AS ut_date,
                         SUM(CASE WHEN p.ORDER_TYPE = 'B' THEN p.QUANTITY ELSE 0 END) AS total_quantity_bought,
                         SUM(CASE WHEN p.ORDER_TYPE = 'B' THEN p.PRICE * p.QUANTITY ELSE 0 END) AS total_purchase_amount,
                         SUM(CASE WHEN p.ORDER_TYPE = 'S' THEN p.QUANTITY ELSE 0 END) AS total_quantity_sold
                     FROM PORTFOLIO p
                     WHERE p.MEMBER_ID = #{memberId}
                       AND DATE(p.ORDERED_AT) BETWEEN CAST(#{startDate} AS DATE) AND CAST(#{endDate} AS DATE)
                     GROUP BY p.STOCK_ID, ut_date
                 ) ut
                     JOIN STOCK s ON ut.STOCK_ID = s.STOCK_ID
            WHERE (ut.total_quantity_bought - ut.total_quantity_sold) > 0
            GROUP BY ut_date
        ) totals ON dr.`date` = totals.date
        GROUP BY dr.`date`
        ORDER BY dr.`date`;
        ]]>
    </select>
</mapper>